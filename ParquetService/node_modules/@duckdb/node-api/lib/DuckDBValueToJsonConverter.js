"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DuckDBValueToJsonConverter = void 0;
const DuckDBTypeId_1 = require("./DuckDBTypeId");
const values_1 = require("./values");
class DuckDBValueToJsonConverter {
    static default = new DuckDBValueToJsonConverter();
    convertValue(value, type) {
        if (value == null) {
            return null;
        }
        switch (type.typeId) {
            case DuckDBTypeId_1.DuckDBTypeId.BOOLEAN:
                return Boolean(value);
            case DuckDBTypeId_1.DuckDBTypeId.TINYINT:
            case DuckDBTypeId_1.DuckDBTypeId.SMALLINT:
            case DuckDBTypeId_1.DuckDBTypeId.INTEGER:
            case DuckDBTypeId_1.DuckDBTypeId.UTINYINT:
            case DuckDBTypeId_1.DuckDBTypeId.USMALLINT:
            case DuckDBTypeId_1.DuckDBTypeId.UINTEGER:
                return Number(value);
            case DuckDBTypeId_1.DuckDBTypeId.FLOAT:
            case DuckDBTypeId_1.DuckDBTypeId.DOUBLE:
                if (Number.isFinite(value)) {
                    return Number(value);
                }
                return String(value);
            case DuckDBTypeId_1.DuckDBTypeId.BIGINT:
            case DuckDBTypeId_1.DuckDBTypeId.UBIGINT:
            case DuckDBTypeId_1.DuckDBTypeId.HUGEINT:
            case DuckDBTypeId_1.DuckDBTypeId.UHUGEINT:
                return String(value);
            case DuckDBTypeId_1.DuckDBTypeId.DATE:
            case DuckDBTypeId_1.DuckDBTypeId.TIME:
            case DuckDBTypeId_1.DuckDBTypeId.TIMESTAMP:
            case DuckDBTypeId_1.DuckDBTypeId.TIMESTAMP_S:
            case DuckDBTypeId_1.DuckDBTypeId.TIMESTAMP_MS:
            case DuckDBTypeId_1.DuckDBTypeId.TIMESTAMP_NS:
            case DuckDBTypeId_1.DuckDBTypeId.TIME_TZ:
            case DuckDBTypeId_1.DuckDBTypeId.TIMESTAMP_TZ:
                return String(value);
            case DuckDBTypeId_1.DuckDBTypeId.INTERVAL:
                if (value instanceof values_1.DuckDBIntervalValue) {
                    return {
                        months: value.months,
                        days: value.days,
                        micros: String(value.micros),
                    };
                }
                return null;
            case DuckDBTypeId_1.DuckDBTypeId.VARCHAR:
            case DuckDBTypeId_1.DuckDBTypeId.BLOB:
            case DuckDBTypeId_1.DuckDBTypeId.BIT:
                return String(value);
            case DuckDBTypeId_1.DuckDBTypeId.DECIMAL:
            case DuckDBTypeId_1.DuckDBTypeId.VARINT:
                return String(value);
            case DuckDBTypeId_1.DuckDBTypeId.ENUM:
                return String(value);
            case DuckDBTypeId_1.DuckDBTypeId.LIST:
                if (value instanceof values_1.DuckDBListValue) {
                    return value.items.map((v) => this.convertValue(v, type.valueType));
                }
                return null;
            case DuckDBTypeId_1.DuckDBTypeId.STRUCT:
                if (value instanceof values_1.DuckDBStructValue) {
                    const result = {};
                    for (const key in value.entries) {
                        result[key] = this.convertValue(value.entries[key], type.typeForEntry(key));
                    }
                    return result;
                }
                return null;
            case DuckDBTypeId_1.DuckDBTypeId.MAP:
                if (value instanceof values_1.DuckDBMapValue) {
                    return value.entries.map((entry) => ({
                        key: this.convertValue(entry.key, type.keyType),
                        value: this.convertValue(entry.value, type.valueType),
                    }));
                }
                return null;
            case DuckDBTypeId_1.DuckDBTypeId.ARRAY:
                if (value instanceof values_1.DuckDBArrayValue) {
                    return value.items.map((v) => this.convertValue(v, type.valueType));
                }
                return null;
            case DuckDBTypeId_1.DuckDBTypeId.UNION:
                if (value instanceof values_1.DuckDBUnionValue) {
                    return {
                        tag: value.tag,
                        value: this.convertValue(value.value, type.memberTypeForTag(value.tag)),
                    };
                }
                return null;
            case DuckDBTypeId_1.DuckDBTypeId.UUID:
                return String(value);
        }
        return null;
    }
}
exports.DuckDBValueToJsonConverter = DuckDBValueToJsonConverter;
