import duckdb from '@duckdb/node-bindings';
import { DuckDBDataChunk } from './DuckDBDataChunk';
import { DuckDBLogicalType } from './DuckDBLogicalType';
import { DuckDBType } from './DuckDBType';
import { DuckDBTypeId } from './DuckDBTypeId';
import { Json } from './DuckDBValueToJsonConverter';
import { ResultReturnType, StatementType } from './enums';
import { DuckDBValue } from './values';
export declare class DuckDBResult {
    protected readonly result: duckdb.Result;
    constructor(result: duckdb.Result);
    get returnType(): ResultReturnType;
    get statementType(): StatementType;
    get columnCount(): number;
    columnName(columnIndex: number): string;
    columnNames(): string[];
    deduplicatedColumnNames(): string[];
    columnTypeId(columnIndex: number): DuckDBTypeId;
    columnLogicalType(columnIndex: number): DuckDBLogicalType;
    columnType(columnIndex: number): DuckDBType;
    columnTypes(): DuckDBType[];
    get isStreaming(): boolean;
    get rowsChanged(): number;
    fetchChunk(): Promise<DuckDBDataChunk | null>;
    fetchAllChunks(): Promise<DuckDBDataChunk[]>;
    getColumns(): Promise<DuckDBValue[][]>;
    getColumnsJson(): Promise<Json[][]>;
    getColumnsObject(): Promise<Record<string, DuckDBValue[]>>;
    getColumnsObjectJson(): Promise<Record<string, Json[]>>;
    getRows(): Promise<DuckDBValue[][]>;
    getRowsJson(): Promise<Json[][]>;
    getRowObjects(): Promise<Record<string, DuckDBValue>[]>;
    getRowObjectsJson(): Promise<Record<string, Json>[]>;
}
